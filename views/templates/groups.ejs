<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Groups - <%= username %>'s Chat Rooms</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/groups_styles.css">
</head>
<body>
    <div class="content-box">
        <div class="container">
            <!-- Header Section -->
            <header class="header">
                <!-- <h1>Groups</h1> -->
            </header>

            <!-- Main Content Area -->
            <div class="main-content">
                <!-- Left Sidebar: Group List -->
                <div class="groups-list">
                    <div class="group-header" style="display: flex; justify-content: space-between; align-items: center;">
                        <h2>Total Groups: <%= rooms ? rooms.length : 0 %></h2>
                        <button id="create-group-btn">Create New Group</button>
                    </div>
                    <% if (error) { %>
                        <p class="error"><%= error %></p>
                    <% } %>
                    <% if (rooms && rooms.length > 0) { %>
                        <ul id="group-list">
                            <% rooms.forEach(room => { %>
                                <li class="group-item" data-room-id="<%= room.room_id %>">
                                    <div class="group-image">
                                        <img src="/profile_placeholder.png" alt="Group Placeholder">
                                    </div>
                                    <div class="group-info">
                                        <p class="group-name">
                                            <%= room.name %>
                                            <% if (room.unread_count > 0) { %>
                                                <span class="unread-badge"><%= room.unread_count %></span>
                                            <% } %>
                                        </p>
                                    </div>
                                </li>
                            <% }); %>
                        </ul>
                    <% } else { %>
                        <p class="no-groups">No groups joined yet.</p>
                    <% } %>
                </div>
                

                <!-- Right Main Area: Message Display -->
                <div class="chat-panel" id="chat-panel">
                    <div class="message-list" id="message-list">
                        <!-- Messages will be dynamically inserted here -->
                    </div>
                    <div class="message-input">
                        <div class="input-wrapper">
                            <input type="text" placeholder="Type a message...">
                            <button>Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Creating a New Group -->
    <div id="group-modal" class="modal" style="display:none;">
        <div class="modal-content">
            <h2>Create New Group</h2>
            <label for="group-name-input">Group Name:</label>
            <input type="text" id="group-name-input" placeholder="Enter group name">
            <div id="user-list">
                <!-- User list with checkboxes will be populated here -->
            </div>
            <div class="modal-actions" style="margin-top: 10px;">
                <button id="create-group-confirm-btn">Create</button>
                <button id="create-group-cancel-btn">Cancel</button>
            </div>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const groupItems = document.querySelectorAll('.group-item');
            const messageList = document.getElementById('message-list');
            // Convert the rendered userId to a number for proper comparison
            const currentUserId = parseInt('<%= userId %>', 10);
            const sendButton = document.querySelector('.input-wrapper button');
            const messageInput = document.querySelector('.input-wrapper input');
            let activeRoomId = null;
    
            // Helper function to format dates as yyyy-mm-dd
            function formatDateToYYYYMMDD(date) {
                const d = new Date(date);
                const year = d.getFullYear();
                const month = String(d.getMonth() + 1).padStart(2, '0');
                const day = String(d.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }
    
            groupItems.forEach(item => {
                item.addEventListener('click', async () => {
                    const roomId = item.getAttribute('data-room-id');
                    activeRoomId = roomId;
                    try {
                        const response = await fetch(`/api/messages/${roomId}`);
                        const data = await response.json();
                        const messages = data.messages;
    
                        // Clear previous messages
                        messageList.innerHTML = '';
    
                        // Render messages
                        messages.forEach(msg => {
                            const isCurrentUser = msg.user_id === currentUserId;
                            const messageClass = isCurrentUser ? 'message sent' : 'message received';
                            const messageHtml = `
                                <div class="${messageClass}">
                                    ${!isCurrentUser ? `<img src="${msg.profile_img || 'https://via.placeholder.com/40'}" alt="${msg.username}" class="profile-pic">` : ''}
                                    <div class="message-content">
                                        <div class="message-text">${msg.text}</div>
                                        <div class="message-time">${formatDateToYYYYMMDD(msg.sent_datetime)}</div>
                                    </div>
                                </div>
                            `;
                            messageList.innerHTML += messageHtml;
                        });
                        messageList.scrollTop = messageList.scrollHeight;
    
                        // Clear unread count for this room via API call
                        fetch('/api/clearUnread', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ roomId: activeRoomId })
                        }).then(() => {
                            // Remove the unread badge from the clicked group item
                            const unreadBadge = item.querySelector('.unread-badge');
                            if (unreadBadge) {
                                unreadBadge.remove();
                            }
                        });
                    } catch (error) {
                        console.error('Error fetching messages:', error);
                        messageList.innerHTML = '<p>Error loading messages</p>';
                    }
                });
            });
    
            sendButton.addEventListener('click', async () => {
                const text = messageInput.value.trim();
                if (!activeRoomId) {
                    alert('Please select a group to send a message.');
                    return;
                }
                if (text === '') return;
    
                try {
                    const response = await fetch('/api/messages', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ roomId: activeRoomId, text })
                    });
                    const data = await response.json();
                    if (data.success) {
                        const messageHtml = `
                            <div class="message sent">
                                <div class="message-content">
                                    <div class="message-text">${text}</div>
                                    <div class="message-time">${formatDateToYYYYMMDD(data.sent_datetime)}</div>
                                </div>
                            </div>
                        `;
                        messageList.innerHTML += messageHtml;
                        messageList.scrollTop = messageList.scrollHeight;
                        messageInput.value = '';
                    } else {
                        console.error('Error sending message:', data.error);
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                }
            });
    
            // Popup for Creating a New Group 
            const createGroupBtn = document.getElementById('create-group-btn');
            const groupModal = document.getElementById('group-modal');
            const createGroupConfirmBtn = document.getElementById('create-group-confirm-btn');
            const createGroupCancelBtn = document.getElementById('create-group-cancel-btn');
            const userListContainer = document.getElementById('user-list');
            const groupNameInput = document.getElementById('group-name-input');
    
            // Function to open the modal and fetch users
            createGroupBtn.addEventListener('click', async () => {
                groupModal.style.display = 'block';
                groupNameInput.value = '';
                userListContainer.innerHTML = 'Loading users...';
                try {
                    const response = await fetch('/api/users');
                    const data = await response.json();
                    // Filter out the current user from the list if desired
                    const users = data.users.filter(u => Number(u.user_id) !== currentUserId);
                    if (users.length === 0) {
                        userListContainer.innerHTML = '<p>No other users available.</p>';
                        return;
                    }
                    userListContainer.innerHTML = '<ul>';
                    users.forEach(user => {
                        userListContainer.innerHTML += `
                            <li>
                                <label>
                                    <input type="checkbox" value="${user.user_id}">
                                    ${user.username}
                                </label>
                            </li>
                        `;
                    });
                    userListContainer.innerHTML += '</ul>';
                } catch (err) {
                    console.error('Error fetching users:', err);
                    userListContainer.innerHTML = '<p>Error loading users.</p>';
                }
            });
    
            // Cancel button to close the modal
            createGroupCancelBtn.addEventListener('click', () => {
                groupModal.style.display = 'none';
            });
    
            // Confirm button to create the group
            createGroupConfirmBtn.addEventListener('click', async () => {
                const groupName = groupNameInput.value.trim();
                if (!groupName) {
                    alert('Please enter a group name.');
                    return;
                }
                // Gather selected user ids
                const checkboxes = userListContainer.querySelectorAll('input[type="checkbox"]:checked');
                const invitedUserIds = Array.from(checkboxes).map(cb => parseInt(cb.value, 10));
                // Include current user automatically
                invitedUserIds.push(currentUserId);
    
                try {
                    const response = await fetch('/api/createGroup', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ groupName, invitedUserIds })
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert('Group created successfully!');
                        groupModal.style.display = 'none';
                        // Reload to display new group right away
                        location.reload();
                    } else {
                        console.error('Error creating group:', data.error);
                    }
                } catch (error) {
                    console.error('Error creating group:', error);
                }
            });
    
            window.addEventListener('click', (e) => {
                if (e.target === groupModal) {
                    groupModal.style.display = 'none';
                }
            });
        });
    </script>
    
    
</body>
</html>