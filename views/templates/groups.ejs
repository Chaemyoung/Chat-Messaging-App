<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Groups - <%= username %>'s Chat Rooms</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/groups_styles.css">
</head>

<body>
    <div class="content-box">
        <div class="container">
            <!-- Header Section -->
            <header class="header">
            </header>

            <!-- Main Content Area -->
            <div class="main-content">
                <!-- Left Sidebar: Group List -->
                <div class="groups-list">
                    <div class="group-header"
                        style="display: flex; justify-content: space-between; align-items: center;">
                        <h2>Total Groups: <%= rooms ? rooms.length : 0 %>
                        </h2>
                        <button id="create-group-btn">Create New Group</button>
                    </div>
                    <% if (error) { %>
                        <p class="error">
                            <%= error %>
                        </p>
                        <% } %>
                            <% if (rooms && rooms.length> 0) { %>
                                <ul id="group-list">
                                    <% rooms.forEach(room=> { %>
                                        <li class="group-item" data-room-id="<%= room.room_id %>">
                                            <div class="group-info">
                                                <p class="group-name">
                                                    <%= room.name %>
                                                        <% if (room.unread_count> 0) { %>
                                                            <span class="unread-badge">
                                                                <%= room.unread_count %>
                                                            </span>
                                                            <% } %>
                                                </p>
                                            </div>
                                        </li>
                                        <% }); %>
                                </ul>
                                <% } else { %>
                                    <p class="no-groups">No groups joined yet.</p>
                                    <% } %>
                </div>

                <!-- Chat Panel -->
                <div class="chat-panel">
                    <div class="group-info">
                        <h2 id="group-name">Select a group</h2>
                        <button id="invite-btn">Invite</button>
                    </div>
                    <div class="message-list" id="message-list"></div>
                    <div class="message-input">
                        <div class="input-wrapper">
                            <input type="text" placeholder="Type a message...">
                            <button>Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Emoji Picker -->
    <div id="emoji-picker" class="emoji-picker"></div>

    <!-- Modal for Creating a New Group -->
    <div id="group-modal" class="modal" style="display:none;">
        <div class="modal-content">
            <h2>Create New Group</h2>
            <label for="group-name-input">Group Name:</label>
            <input type="text" id="group-name-input" placeholder="Enter group name">
            <div id="user-list"></div>
            <div class="modal-actions" style="margin-top: 10px;">
                <button id="create-group-confirm-btn">Create</button>
                <button id="create-group-cancel-btn">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Invite Modal -->
    <div id="invite-modal" class="modal" style="display: none;">
        <div class="modal-content">
            <h2>Invite to Group</h2>
            <div id="current-members">
                <h3>Current Members</h3>
                <ul></ul>
            </div>
            <div id="invite-list">
                <h3>Invite New Members</h3>
                <ul></ul>
            </div>
            <div class="modal-actions">
                <button id="invite-confirm-btn">Invite</button>
                <button id="invite-cancel-btn">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Variable declarations
            const groupItems = document.querySelectorAll('.group-item');
            const messageList = document.getElementById('message-list');
            const currentUserId = parseInt('<%= userId %>', 10);
            const sendButton = document.querySelector('.input-wrapper button');
            const messageInput = document.querySelector('.input-wrapper input');
            const inviteBtn = document.getElementById('invite-btn');
            const inviteModal = document.getElementById('invite-modal');
            const inviteConfirmBtn = document.getElementById('invite-confirm-btn');
            const inviteCancelBtn = document.getElementById('invite-cancel-btn');
            const createGroupBtn = document.getElementById('create-group-btn');
            const groupModal = document.getElementById('group-modal');
            const createGroupConfirmBtn = document.getElementById('create-group-confirm-btn');
            const createGroupCancelBtn = document.getElementById('create-group-cancel-btn');
            const userListContainer = document.getElementById('user-list');
            const groupNameInput = document.getElementById('group-name-input');
            const emojiPicker = document.getElementById('emoji-picker');
            let activeRoomId = null;
            let messageReactions = {};
            let activeReactionButtonMessageId = null;
            let emojiList = [];

            // Fetch emojis from database
            async function fetchEmojis() {
                try {
                    const response = await fetch('/api/emojis');
                    if (!response.ok) throw new Error('Failed to fetch emojis');
                    const data = await response.json();
                    console.log('Emoji API response:', data);
                    return data.emojis || [];
                } catch (error) {
                    console.error('Error fetching emojis:', error);
                    return [];
                }
            }

            // Initialize application
            async function initialize() {
                emojiList = await fetchEmojis();
                loadEmojiPicker();
            }

            // Helper function to format dates as yyyy-mm-dd
            function formatDateToYYYYMMDD(date) {
                const d = new Date(date);
                const year = d.getFullYear();
                const month = String(d.getMonth() + 1).padStart(2, '0');
                const day = String(d.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            // Load emojis into the emoji picker
            function loadEmojiPicker() {
                emojiPicker.innerHTML = '';
                if (emojiList.length === 0) {
                    emojiPicker.innerHTML = '<p>No emojis available</p>';
                    return;
                }

                emojiList.forEach(emoji => {
                    const emojiImg = document.createElement('img');
                    emojiImg.src = emoji.image;
                    emojiImg.alt = emoji.name;
                    emojiImg.dataset.emojiId = emoji.emoji_id;
                    emojiImg.addEventListener('click', handleEmojiSelect);
                    emojiPicker.appendChild(emojiImg);
                });
            }

            // Handle emoji selection
            function handleEmojiSelect(e) {
                const emojiId = parseInt(e.target.dataset.emojiId);
                const messageId = activeReactionButtonMessageId;

                if (!messageId) return;

                addReaction(messageId, {
                    user_id: currentUserId,
                    emoji_id: emojiId,
                    emoji_image: e.target.src,
                    emoji_name: e.target.alt
                });

                emojiPicker.style.display = 'none';
                sendReactionToServer(messageId, emojiId);
            }

            // Add reaction to the message
            function addReaction(messageId, reaction) {
                if (!messageReactions[messageId]) {
                    messageReactions[messageId] = [];
                }

                const existingReaction = messageReactions[messageId].find(r =>
                    r.user_id === reaction.user_id && r.emoji_id === reaction.emoji_id);

                if (!existingReaction) {
                    messageReactions[messageId].push(reaction);
                    updateReactionsDisplay(messageId);
                }
            }

            // Update the reactions display for a message
            function updateReactionsDisplay(messageId) {
                const messageElement = document.querySelector(`.message[data-message-id="${messageId}"]`);
                if (!messageElement) return;

                let reactionsContainer = messageElement.querySelector('.message-reactions');
                if (!reactionsContainer) {
                    reactionsContainer = document.createElement('div');
                    reactionsContainer.className = 'message-reactions';
                    messageElement.querySelector('.message-content').appendChild(reactionsContainer);
                }

                reactionsContainer.innerHTML = '';

                const groupedReactions = {};
                if (messageReactions[messageId]) {
                    messageReactions[messageId].forEach(reaction => {
                        if (!groupedReactions[reaction.emoji_id]) {
                            groupedReactions[reaction.emoji_id] = {
                                count: 0,
                                emoji_image: reaction.emoji_image,
                                emoji_name: reaction.emoji_name
                            };
                        }
                        groupedReactions[reaction.emoji_id].count++;
                    });
                }

                Object.values(groupedReactions).forEach(reaction => {
                    const reactionElement = document.createElement('div');
                    reactionElement.className = 'reaction';
                    reactionElement.innerHTML = `
                        <img src="${reaction.emoji_image}" alt="${reaction.emoji_name}">
                        <span>${reaction.count}</span>
                    `;
                    reactionsContainer.appendChild(reactionElement);
                });
            }

            // Show emoji picker when reaction button is clicked
            function showEmojiPicker(event, messageId) {
                event.stopPropagation();

                activeReactionButtonMessageId = messageId;

                const buttonRect = event.target.getBoundingClientRect();
                emojiPicker.style.top = `${buttonRect.bottom + window.scrollY + 5}px`;
                emojiPicker.style.left = `${buttonRect.left + window.scrollX}px`;
                emojiPicker.style.display = 'block';

                document.addEventListener('click', closeEmojiPicker);
            }

            function closeEmojiPicker(event) {
                if (!emojiPicker.contains(event.target) && !event.target.classList.contains('reaction-button')) {
                    emojiPicker.style.display = 'none';
                    document.removeEventListener('click', closeEmojiPicker);
                }
            }

            // Group selection logic
            groupItems.forEach(item => {
                item.addEventListener('click', async () => {
                    activeRoomId = item.getAttribute('data-room-id');
                    const groupName = item.querySelector('.group-name').textContent.trim();
                    document.getElementById('group-name').textContent = groupName;

                    try {
                        const response = await fetch(`/api/messages/${activeRoomId}`);
                        if (!response.ok) throw new Error('Failed to fetch messages');
                        const data = await response.json();
                        const messages = data.messages;

                        messageReactions = {};

                        messageList.innerHTML = '';

                        messages.forEach(msg => {
                            const isCurrentUser = msg.user_id === currentUserId;
                            const messageClass = isCurrentUser ? 'message sent' : 'message received';
                            const messageHtml = `
                                <div class="${messageClass}" data-message-id="${msg.message_id}">
                                    ${!isCurrentUser ? `<img src="${msg.profile_img}" alt="${msg.username}" class="profile-pic">` : ''}
                                    <div class="message-content">
                                        <div class="message-text">${msg.text}</div>
                                        <div class="message-time">${formatDateToYYYYMMDD(msg.sent_datetime)}</div>
                                        <div class="message-reactions"></div>
                                    </div>
                                    <button class="reaction-button" data-message-id="${msg.message_id}">+</button>
                                </div>
                            `;
                            messageList.innerHTML += messageHtml;
                        });

                        document.querySelectorAll('.reaction-button').forEach(button => {
                            button.addEventListener('click', (e) => {
                                const messageId = parseInt(button.dataset.messageId);
                                showEmojiPicker(e, messageId);
                            });
                        });

                        messageList.scrollTop = messageList.scrollHeight;

                        await fetch('/api/clearUnread', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ roomId: activeRoomId })
                        });
                        const unreadBadge = item.querySelector('.unread-badge');
                        if (unreadBadge) unreadBadge.remove();

                        fetchReactionsForMessages(messages.map(m => m.message_id));
                    } catch (error) {
                        console.error('Error fetching messages:', error);
                        messageList.innerHTML = '<p>Error loading messages</p>';
                    }
                });
            });

            // Send message functionality
            if (sendButton) {
                sendButton.addEventListener('click', async () => {
                    const text = messageInput.value.trim();
                    if (!activeRoomId) {
                        alert('Please select a group to send a message.');
                        return;
                    }
                    if (!text) return;

                    try {
                        const response = await fetch('/api/messages', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ roomId: activeRoomId, text })
                        });
                        const data = await response.json();
                        if (data.success) {
                            const messageId = data.messageId;
                            const messageHtml = `
                                <div class="message sent" data-message-id="${messageId}">
                                    <div class="message-content">
                                        <div class="message-text">${text}</div>
                                        <div class="message-time">${formatDateToYYYYMMDD(data.sent_datetime)}</div>
                                        <div class="message-reactions"></div>
                                    </div>
                                    <button class="reaction-button" data-message-id="${messageId}">+</button>
                                </div>
                            `;
                            messageList.innerHTML += messageHtml;

                            const newReactionButton = messageList.querySelector(`.reaction-button[data-message-id="${messageId}"]`);
                            if (newReactionButton) {
                                newReactionButton.addEventListener('click', (e) => {
                                    showEmojiPicker(e, messageId);
                                });
                            }

                            messageList.scrollTop = messageList.scrollHeight;
                            messageInput.value = '';
                        } else {
                            console.error('Error sending message:', data.error);
                        }
                    } catch (error) {
                        console.error('Error sending message:', error);
                    }
                });

                messageInput.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        sendButton.click();
                    }
                });
            }

            // Invite button functionality
            if (inviteBtn) {
                inviteBtn.addEventListener('click', () => {
                    if (!activeRoomId) {
                        alert('Please select a group first');
                        return;
                    }
                    if (inviteModal) {
                        inviteModal.style.display = 'block';
                        loadInviteModal(activeRoomId);
                    } else {
                        console.error('Invite modal not found in the DOM');
                    }
                });
            }

            // Close invite modal on cancel
            if (inviteCancelBtn) {
                inviteCancelBtn.addEventListener('click', () => {
                    if (inviteModal) inviteModal.style.display = 'none';
                });
            }

            // Create group button functionality
            if (createGroupBtn) {
                createGroupBtn.addEventListener('click', async () => {
                    if (groupModal) {
                        groupModal.style.display = 'block';
                        if (groupNameInput) groupNameInput.value = '';
                        if (userListContainer) userListContainer.innerHTML = 'Loading users...';

                        try {
                            const response = await fetch('/api/users');
                            const data = await response.json();
                            const users = data.users.filter(u => Number(u.user_id) !== currentUserId);
                            if (users.length === 0) {
                                userListContainer.innerHTML = '<p>No other users available.</p>';
                                return;
                            }
                            userListContainer.innerHTML = '<ul>';
                            users.forEach(user => {
                                userListContainer.innerHTML += `
                                    <li>
                                        <label>
                                            <input type="checkbox" value="${user.user_id}">
                                            <img src="${user.profile_img}" alt="${user.username} profile" style="width:30px; height:30px; border-radius:50%; vertical-align:middle; margin-right:8px;">
                                            ${user.username}
                                        </label>
                                    </li>
                                `;
                            });
                            userListContainer.innerHTML += '</ul';
                        } catch (err) {
                            console.error('Error fetching users:', err);
                            if (userListContainer) userListContainer.innerHTML = '<p>Error loading users.</p>';
                        }
                    } else {
                        console.error('Group modal not found in the DOM');
                    }
                });
            }

            // Close create group modal on cancel
            if (createGroupCancelBtn) {
                createGroupCancelBtn.addEventListener('click', () => {
                    if (groupModal) groupModal.style.display = 'none';
                });
            }

            // Close modals when clicking outside
            window.addEventListener('click', (e) => {
                if (e.target === inviteModal && inviteModal) {
                    inviteModal.style.display = 'none';
                }
                if (e.target === groupModal && groupModal) {
                    groupModal.style.display = 'none';
                }
            });

            // Confirm invite functionality
            if (inviteConfirmBtn) {
                inviteConfirmBtn.addEventListener('click', async () => {
                    const checkboxes = document.querySelectorAll('#invite-list input[type="checkbox"]:checked');
                    const invitedUserIds = Array.from(checkboxes).map(cb => parseInt(cb.value, 10));

                    if (invitedUserIds.length === 0) {
                        alert('Please select at least one user to invite');
                        return;
                    }

                    try {
                        const response = await fetch(`/api/group/${activeRoomId}/invite`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ invitedUserIds })
                        });
                        const data = await response.json();

                        if (data.success) {
                            alert('Users have been invited successfully!');
                            if (inviteModal) inviteModal.style.display = 'none';
                            loadInviteModal(activeRoomId);
                        } else {
                            alert('Failed to invite users: ' + (data.error || 'Unknown error'));
                        }
                    } catch (error) {
                        console.error('Error inviting users:', error);
                        alert('An error occurred while inviting users');
                    }
                });
            }

            // Confirm create group functionality
            if (createGroupConfirmBtn) {
                createGroupConfirmBtn.addEventListener('click', async () => {
                    const groupName = groupNameInput?.value.trim();
                    if (!groupName) {
                        alert('Please enter a group name.');
                        return;
                    }
                    const checkboxes = userListContainer?.querySelectorAll('input[type="checkbox"]:checked');
                    const invitedUserIds = checkboxes ? Array.from(checkboxes).map(cb => parseInt(cb.value, 10)) : [];
                    invitedUserIds.push(currentUserId);

                    try {
                        const response = await fetch('/api/createGroup', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ groupName, invitedUserIds })
                        });
                        const data = await response.json();
                        if (data.success) {
                            alert('Group created successfully!');
                            if (groupModal) groupModal.style.display = 'none';
                            location.reload();
                        } else {
                            console.error('Error creating group:', data.error);
                            alert('Failed to create group: ' + (data.error || 'Unknown error'));
                        }
                    } catch (error) {
                        console.error('Error creating group:', error);
                        alert('An error occurred while creating the group');
                    }
                });
            }

            // Load invite modal data
            async function loadInviteModal(roomId) {
                const currentMembersList = document.querySelector('#current-members ul');
                const inviteList = document.querySelector('#invite-list ul');

                if (!currentMembersList || !inviteList) {
                    console.error('Modal elements not found');
                    return;
                }

                currentMembersList.innerHTML = '<li>Loading current members...</li>';
                inviteList.innerHTML = '<li>Loading available users...</li>';

                try {
                    const membersResponse = await fetch(`/api/group/${roomId}/members`);
                    if (!membersResponse.ok) throw new Error(`Failed to fetch members: ${membersResponse.statusText}`);
                    const membersData = await membersResponse.json();
                    const members = Array.isArray(membersData) ? membersData : (membersData.members || []);

                    const allUsersResponse = await fetch('/api/users');
                    if (!allUsersResponse.ok) throw new Error(`Failed to fetch users: ${allUsersResponse.statusText}`);
                    const allUsersData = await allUsersResponse.json();
                    const allUsers = Array.isArray(allUsersData) ? allUsersData : (allUsersData.users || []);

                    currentMembersList.innerHTML = members.length > 0
                        ? members.map(member => `<li><img src="${member.profile_img}" alt="${member.username} profile" style="width:30px; height:30px; border-radius:50%; vertical-align:middle; margin-right:8px;">${member.username || 'Unknown user'}</li>`).join('')
                        : '<li>No members found</li>';

                    const memberIds = members.map(m => m.user_id);
                    const nonMembers = allUsers.filter(user => !memberIds.includes(user.user_id));
                    inviteList.innerHTML = nonMembers.length > 0
                        ? nonMembers.map(user => `
                            <li>
                                <label>
                                    <input type="checkbox" value="${user.user_id}">
                                    <img src="${user.profile_img}" alt="${user.username} profile" style="width:30px; height:30px; border-radius:50%; vertical-align:middle; margin-right:8px;">
                                    ${user.username || 'Unknown user'}
                                </label>
                            </li>
                        `).join('')
                        : '<li>No users available to invite</li>';
                } catch (error) {
                    console.error('Error loading invite modal data:', error);
                    currentMembersList.innerHTML = '<li>Error loading members</li>';
                    inviteList.innerHTML = '<li>Error loading users</li>';
                }
            }

            // Fetch reactions for messages from the database
            async function fetchReactionsForMessages(messageIds) {
                if (!messageIds || messageIds.length === 0) return;

                try {
                    const promises = messageIds.map(messageId =>
                        fetch(`/api/messages/${messageId}/reactions`).then(res => res.json())
                    );
                    const results = await Promise.all(promises);
                    results.forEach((data, index) => {
                        if (data.reactions) {
                            const messageId = messageIds[index];
                            if (!messageReactions[messageId]) messageReactions[messageId] = [];
                            data.reactions.forEach(reaction => {
                                messageReactions[messageId].push({
                                    user_id: reaction.user_id,
                                    emoji_id: reaction.emoji_id,
                                    emoji_image: reaction.emoji_image || '/emojis/' + reaction.emoji_name + '.png',
                                    emoji_name: reaction.emoji_name
                                });
                                updateReactionsDisplay(messageId);
                            });
                        }
                    });
                } catch (error) {
                    console.error('Error fetching reactions:', error);
                }
            }

            // Function to send a reaction to the server
            function sendReactionToServer(messageId, emojiId) {
                fetch('/api/reactions', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message_id: messageId,
                        emoji_id: emojiId,
                        user_id: currentUserId
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            console.error('Error adding reaction:', data.error);
                        }
                    })
                    .catch(error => console.error('Error sending reaction:', error));
            }

            // Initialize the application
            initialize();
        });
    </script>
</body>

</html>